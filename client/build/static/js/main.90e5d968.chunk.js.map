{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","create","Room","useState","audio","setAudio","video","setVideo","isCopied","setIsCopied","userVideo","useRef","partnerVideo","peerRef","socketRef","otherUser","userStream","senders","createPeer","userID","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","current","createOffer","then","offer","setLocalDescription","payload","target","caller","sdp","localDescription","emit","catch","e","console","log","handleNegotiationNeededEvent","handleRecieveCall","incoming","desc","RTCSessionDescription","setRemoteDescription","getTracks","forEach","track","addTrack","createAnswer","answer","handleAnswer","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","useEffect","navigator","mediaDevices","getUserMedia","stream","io","connect","match","params","roomID","on","callUser","style","display","width","margin","controls","autoPlay","ref","border","height","getDisplayMedia","cursor","screenTrack","find","sender","kind","replaceTrack","onended","window","location","href","url","clipboard","writeText","setTimeout","err","App","className","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.90e5d968.chunk.js","sourcesContent":["import React from 'react';\r\nimport { v1 as uuid } from 'uuid';\r\n\r\nconst CreateRoom = (props) => {\r\n    const create = () => {\r\n        const id = uuid();\r\n        props.history.push(`/room/${id}`);\r\n    };\r\n    return <button onClick={() => create()}>Create Room</button>;\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useRef, useEffect, useState } from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nconst Room = (props) => {\r\n    const [audio, setAudio] = useState(true);\r\n    const [video, setVideo] = useState(true);\r\n    const [isCopied, setIsCopied] = useState(false);\r\n\r\n    const userVideo = useRef();\r\n    const partnerVideo = useRef();\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const userStream = useRef();\r\n    const senders = useRef([]);\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices\r\n            .getUserMedia({ audio: audio, video: video })\r\n            .then((stream) => {\r\n                userVideo.current.srcObject = stream;\r\n                userStream.current = stream;\r\n\r\n                socketRef.current = io.connect('/');\r\n                socketRef.current.emit('join room', props.match.params.roomID);\r\n                socketRef.current.on('other user', (userID) => {\r\n                    callUser(userID);\r\n                    otherUser.current = userID;\r\n                });\r\n\r\n                socketRef.current.on('user joined', (userID) => {\r\n                    otherUser.current = userID;\r\n                });\r\n\r\n                socketRef.current.on('offer', handleRecieveCall);\r\n\r\n                socketRef.current.on('answer', handleAnswer);\r\n\r\n                socketRef.current.on('ice-candidate', handleNewICECandidateMsg);\r\n            });\r\n    }, [audio, video]);\r\n\r\n    function callUser(userID) {\r\n        peerRef.current = createPeer(userID);\r\n        userStream.current\r\n            .getTracks()\r\n            .forEach((track) =>\r\n                senders.current.push(\r\n                    peerRef.current.addTrack(track, userStream.current),\r\n                ),\r\n            );\r\n    }\r\n\r\n    function createPeer(userID) {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: 'stun:stun.stunprotocol.org',\r\n                },\r\n                {\r\n                    urls: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com',\r\n                },\r\n            ],\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.ontrack = handleTrackEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    function handleNegotiationNeededEvent(userID) {\r\n        peerRef.current\r\n            .createOffer()\r\n            .then((offer) => {\r\n                return peerRef.current.setLocalDescription(offer);\r\n            })\r\n            .then(() => {\r\n                const payload = {\r\n                    target: userID,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription,\r\n                };\r\n                socketRef.current.emit('offer', payload);\r\n            })\r\n            .catch((e) => console.log(e));\r\n    }\r\n\r\n    function handleRecieveCall(incoming) {\r\n        peerRef.current = createPeer();\r\n        const desc = new RTCSessionDescription(incoming.sdp);\r\n        peerRef.current\r\n            .setRemoteDescription(desc)\r\n            .then(() => {\r\n                userStream.current\r\n                    .getTracks()\r\n                    .forEach((track) =>\r\n                        peerRef.current.addTrack(track, userStream.current),\r\n                    );\r\n            })\r\n            .then(() => {\r\n                return peerRef.current.createAnswer();\r\n            })\r\n            .then((answer) => {\r\n                return peerRef.current.setLocalDescription(answer);\r\n            })\r\n            .then(() => {\r\n                const payload = {\r\n                    target: incoming.caller,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription,\r\n                };\r\n                socketRef.current.emit('answer', payload);\r\n            });\r\n    }\r\n\r\n    function handleAnswer(message) {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch((e) => console.log(e));\r\n    }\r\n\r\n    function handleICECandidateEvent(e) {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            };\r\n            socketRef.current.emit('ice-candidate', payload);\r\n        }\r\n    }\r\n\r\n    function handleNewICECandidateMsg(incoming) {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate).catch((e) => console.log(e));\r\n    }\r\n\r\n    function handleTrackEvent(e) {\r\n        partnerVideo.current.srcObject = e.streams[0];\r\n    }\r\n\r\n    function shareScreen() {\r\n        navigator.mediaDevices\r\n            .getDisplayMedia({ cursor: true })\r\n            .then((stream) => {\r\n                const screenTrack = stream.getTracks()[0];\r\n                senders.current\r\n                    .find((sender) => sender.track.kind === 'video')\r\n                    .replaceTrack(screenTrack);\r\n                screenTrack.onended = function () {\r\n                    senders.current\r\n                        .find((sender) => sender.track.kind === 'video')\r\n                        .replaceTrack(userStream.current.getTracks()[1]);\r\n                };\r\n            });\r\n    }\r\n\r\n    function handleToggleMic() {\r\n        setAudio(!audio);\r\n    }\r\n\r\n    function handleToggleCam() {\r\n        setVideo(!video);\r\n    }\r\n\r\n    function handleCopyLink(url) {\r\n        navigator.clipboard\r\n            .writeText(url)\r\n            .then(() => {\r\n                console.log('Copied!');\r\n                setIsCopied(true);\r\n                setTimeout(() => setIsCopied(false), 1000);\r\n            })\r\n            .catch((err) => {\r\n                console.log('Something went wrong', err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ display: 'flex', width: '1050px', margin: 'auto' }}>\r\n                <div>\r\n                    <h3>User (I'm)</h3>\r\n                    <video\r\n                        controls\r\n                        autoPlay\r\n                        ref={userVideo}\r\n                        style={{\r\n                            border: '4px solid red',\r\n                            height: 500,\r\n                            width: 500,\r\n                        }}\r\n                    ></video>\r\n                </div>\r\n\r\n                <div>\r\n                    <h3>Partner</h3>\r\n                    <video\r\n                        controls\r\n                        autoPlay\r\n                        ref={partnerVideo}\r\n                        style={{\r\n                            border: '4px solid blue',\r\n                            height: 500,\r\n                            width: 500,\r\n                        }}\r\n                    ></video>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <button onClick={handleToggleMic}>Microphone</button>\r\n                <button onClick={handleToggleCam}>Camera</button>\r\n                <button onClick={shareScreen}>Share screen</button>\r\n            </div>\r\n            <div>\r\n                URL for Contact: {window.location.href}\r\n                <button onClick={() => handleCopyLink(window.location.href)}>\r\n                    Copy\r\n                </button>{' '}\r\n                {isCopied && <span>Copied!</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;\r\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport CreateRoom from './routes/CreateRoom';\nimport Room from './routes/Room';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" exact component={CreateRoom} />\n                    <Route path=\"/room/:roomID\" component={Room} />\n                </Switch>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}